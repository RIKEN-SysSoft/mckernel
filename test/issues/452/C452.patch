diff --git a/arch/arm64/kernel/include/syscall_list.h b/arch/arm64/kernel/include/syscall_list.h
index 5dd6243..709231d 100644
--- a/arch/arm64/kernel/include/syscall_list.h
+++ b/arch/arm64/kernel/include/syscall_list.h
@@ -128,6 +128,8 @@ SYSCALL_HANDLED(731, util_indicate_clone)
 SYSCALL_HANDLED(732, get_system)
 SYSCALL_HANDLED(733, util_register_desc)
 
+SYSCALL_HANDLED(740, setkdebug)
+
 /* McKernel Specific */
 SYSCALL_HANDLED(801, swapout)
 SYSCALL_HANDLED(802, linux_mlock)
diff --git a/arch/x86_64/kernel/include/syscall_list.h b/arch/x86_64/kernel/include/syscall_list.h
index 8ef9bd0..16361ea 100644
--- a/arch/x86_64/kernel/include/syscall_list.h
+++ b/arch/x86_64/kernel/include/syscall_list.h
@@ -170,6 +170,8 @@ SYSCALL_HANDLED(731, util_indicate_clone)
 SYSCALL_HANDLED(732, get_system)
 SYSCALL_HANDLED(733, util_register_desc)
 
+SYSCALL_HANDLED(740, setkdebug)
+
 /* McKernel Specific */
 SYSCALL_HANDLED(801, swapout)
 SYSCALL_HANDLED(802, linux_mlock)
diff --git a/kernel/include/process.h b/kernel/include/process.h
index cfaf70b..ece1f4c 100644
--- a/kernel/include/process.h
+++ b/kernel/include/process.h
@@ -573,6 +573,7 @@ struct process {
 #endif // PROFILE_ENABLE
 	int nr_processes; /* For partitioned execution */
 	int process_rank; /* Rank in partition */
+	int debug_flags;
 };
 
 /*
diff --git a/kernel/procfs.c b/kernel/procfs.c
index 8cf31be..e36747d 100644
--- a/kernel/procfs.c
+++ b/kernel/procfs.c
@@ -441,6 +441,7 @@ static int _process_procfs_request(struct ikc_scd_packet *rpacket, int intCTX)
 				if ((err = add_backlog(vm, rpacket))) {
 					goto err;
 				}
+				kprintf("read /proc/*/maps\n");
 				goto out;
 			}
 		}
@@ -517,6 +518,7 @@ static int _process_procfs_request(struct ikc_scd_packet *rpacket, int intCTX)
 				if ((err = add_backlog(vm, rpacket))) {
 					goto err;
 				}
+				kprintf("read /proc/*/pagemap\n");
 				goto out;
 			}
 		}
@@ -568,6 +570,7 @@ static int _process_procfs_request(struct ikc_scd_packet *rpacket, int intCTX)
 				if ((err = add_backlog(proc->vm, rpacket))) {
 					goto err;
 				}
+				kprintf("read /proc/*/status\n");
 				goto out;
 			}
 		}
diff --git a/kernel/syscall.c b/kernel/syscall.c
index 146b96f..4138d3a 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -1656,6 +1656,18 @@ do_mmap(const uintptr_t addr0, const size_t len0, const int prot,
 	}
 
 	memory_range_lock(thread->vm);
+	if (thread->proc->debug_flags) {
+		// sleep 5 sec
+		unsigned long ts = rdtsc();
+		unsigned long nanosecs = 5000000000L;
+		unsigned long tscs = nanosecs * 1000 / ihk_mc_get_ns_per_tsc();
+
+		kprintf("kernel debug sleep 5sec...\n");
+		while (rdtsc() - ts < tscs) {
+			cpu_pause();
+		}
+		kprintf("kernel debug wake up\n");
+	}
 
 	if (flags & MAP_FIXED) {
 		/* clear specified address range */
@@ -9412,6 +9424,17 @@ SYSCALL_DECLARE(util_register_desc)
 	return 0;
 }
 
+SYSCALL_DECLARE(setkdebug)
+{
+	int flags = ihk_mc_syscall_arg0(ctx);
+	struct thread *mythread = cpu_local_var(current);
+	struct process *proc = mythread->proc;
+
+	kprintf("set kernel debug flag pid=%d val=%d\n", proc->pid, flags);
+	proc->debug_flags = flags;
+	return 0;
+}
+
 void
 reset_cputime()
 {
